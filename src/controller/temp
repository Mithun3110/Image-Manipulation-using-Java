package controller;

import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import model.Image;
import model.imagetransformation.basicoperation.Flip.Direction;

public class ImageController {

    private final Image image;
    private final Map<String, BiConsumer<String, String>> operations;
    private final Map<String, TriConsumer<String, Integer, String>> bOperations;

    public ImageController(Image image) {
        this.image = image;
        this.operations = new HashMap<>();
        this.bOperations = new HashMap<>();

        // Basic operations that don't require additional parameters
        operations.put("blur", (src, dest) -> image.blur(src, dest));
        operations.put("horizontal-flip", (src, dest) -> image.flip(src, dest, Direction.HORIZONTAL));
        operations.put("vertical-flip", (src, dest) -> image.flip(src, dest, Direction.VERTICAL));
        operations.put("greyscale", (src, dest) -> image.greyScale(src, dest));
        operations.put("sepia", (src, dest) -> image.sepia(src, dest));
        operations.put("sharpen", (src, dest) -> image.sharpen(src, dest));
        operations.put("rgb-split", (src, dest) -> image.split(src, dest, dest, dest));
        operations.put("rgb-combine", (src, dest) -> image.combine(dest, src, "src2", "src3"));
        operations.put("value-component", (src, dest) -> image.value(src, dest));
        operations.put("Luma-component", (src, dest) -> image.luma(src, dest));
        operations.put("intensity-component", (src, dest) -> image.intensity(src, dest));
        operations.put("red-component", (src, dest) -> image.getRedChannel(src, dest));
        operations.put("green-component", (src, dest) -> image.getGreenChannel(src, dest));
        operations.put("blue-component", (src, dest) -> image.getBlueChannel(src, dest));
        operations.put("color-correction", (src, dest) -> image.colorCorrection(src, dest));

        // Only operations that take a single additional parameter
        bOperations.put("brighten", (src, factor, dest) -> image.brighten(factor, src, dest));
    }

    public void loadIMage(String key, String fileName) {
        image.getPixels(key, fileName);
    }

    public void saveImage(String key, String fileName) {
        image.savePixels(key, fileName);
    }

    public void applyOperations(String operationName, String srcKey, String destKey) {
        if (operations.containsKey(operationName)) {
            operations.get(operationName).accept(srcKey, destKey);
        } else {
            System.out.println("No such operation: " + operationName);
        }
    }

    public void applyOperationWithParams(String operationName, String srcKey, int param, String destKey) {
        if (bOperations.containsKey(operationName)) {
            bOperations.get(operationName).accept(srcKey, param, destKey);
        } else {
            System.out.println("No such operation with parameters: " + operationName);
        }
    }

    // Separate methods for operations requiring multiple parameters
    public void applyLevelsAdjust(String srcKey, int black, int mid, int white, String destKey) {
        image.adjustLevel(black, mid, white, srcKey, destKey);
    }

    public void applySplitAndTransform(String srcKey, String destKey, int splitValue,
                                     String operation, int... params) {
        image.splitAndTransform(srcKey, destKey, splitValue, operation, params);
    }

    public void applyCompression(String srcKey, String destKey, double compressionRatio) {
        image.compress(srcKey, destKey, compressionRatio);
    }
}